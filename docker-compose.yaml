services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-service
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-net

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "3030:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
    networks:
      - app-net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        GOVERSION: 1.24.4
        ALPINEVERSION: 3.22
    container_name: backend-service
    env_file: ./backend/.env
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-net

  db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-net

volumes:
  pgdata:

networks:
  app-net:
